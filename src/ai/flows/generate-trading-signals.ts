
// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent for generating trading signals based on historical price patterns.
 *
 * - generateTradingSignals - A function that generates trading signals based on historical price patterns and a selected strategy.
 * - GenerateTradingSignalsInput - The input type for the generateTradingSignals function.
 * - GenerateTradingSignalsOutput - The return type for the generateTradingSignals function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const GenerateTradingSignalsInputSchema = z.object({
  historicalData: z
    .string()
    .describe(
      'Historical price data as a JSON string. Each object should contain timestamp, open, high, low, close, and volume.'
    ),
  strategy: z
    .enum(['movingAverage', 'rsi', 'bollingerBands'])
    .describe('The trading strategy to use.'),
  riskLevel: z
    .enum(['high', 'medium', 'low'])
    .describe('The risk level to use for the trading strategy.'),
  cryptocurrencyForAI: z.string().optional().describe('The cryptocurrency symbol the AI should focus its analysis on, e.g., BTC, ETH. This provides context for the asset being analyzed.'),
});
export type GenerateTradingSignalsInput = z.infer<typeof GenerateTradingSignalsInputSchema>;

// Este schema no se usa directamente como output del prompt, pero es una referencia Ãºtil.
// El prompt devuelve un string JSON que DEBE ser parseable a SignalItem[]
const SignalItemSchema = z.object({
  signal: z.enum(['BUY', 'SELL', 'HOLD']).describe("The trading signal: BUY, SELL, or HOLD."),
  confidence: z.number().min(0).max(1).describe("The confidence level of the signal, from 0.0 to 1.0.")
});

const GenerateTradingSignalsOutputSchema = z.object({
  signals: z
    .string()
    .describe(
      'Trading signals as a JSON string representing an array of objects. Each object in the array MUST contain exactly two keys: "signal" (string: "BUY", "SELL", or "HOLD") and "confidence" (number: 0.0 to 1.0). Example: \'[{"signal": "BUY", "confidence": 0.85}, {"signal": "HOLD", "confidence": 0.6}]\', or \'[]\' if no specific action signal.'
    ),
  explanation: z
    .string()
    .describe('Detailed human-readable explanation of the generated trading signals and the reasoning behind them. If providing a signal, try to briefly mention its potential or key factors for its success.'),
});
export type GenerateTradingSignalsOutput = z.infer<typeof GenerateTradingSignalsOutputSchema>;

export async function generateTradingSignals(
  input: GenerateTradingSignalsInput
): Promise<GenerateTradingSignalsOutput> {
  return generateTradingSignalsFlow(input);
}

const prompt = ai.definePrompt({
  name: 'generateTradingSignalsPrompt',
  input: {schema: GenerateTradingSignalsInputSchema},
  output: {schema: GenerateTradingSignalsOutputSchema},
  prompt: `You are an expert in financial markets and trading strategy for {{#if cryptocurrencyForAI}}{{cryptocurrencyForAI}}{{else}}the specified cryptocurrency{{/if}}.

You will analyze historical price patterns and generate trading signals based on the selected strategy and risk level.

Historical Data: {{{historicalData}}}
Strategy: {{{strategy}}}
Risk Level: {{{riskLevel}}}
Contextual Asset for Analysis: {{#if cryptocurrencyForAI}}{{cryptocurrencyForAI}}{{else}}Not specified{{/if}}

Based on this data, provide trading signals and explain your reasoning.

IMPORTANT: Your output for the 'signals' field MUST be a JSON string that represents an array of objects. Each object in the array MUST contain exactly two keys:
1.  "signal": A string with one of three values: "BUY", "SELL", or "HOLD".
2.  "confidence": A number between 0.0 and 1.0 (inclusive) representing the confidence in this signal.

Example of a valid JSON string for the 'signals' field:
'[{"signal": "BUY", "confidence": 0.85}, {"signal": "HOLD", "confidence": 0.60}]'
'[{"signal": "SELL", "confidence": 0.75}]'
'[{"signal": "HOLD", "confidence": 0.90}]'
'[]' (This is also valid if no specific BUY/SELL/HOLD signal is identified, but try to provide at least a HOLD if unsure)

If you cannot determine a strong BUY or SELL signal, it's generally better to provide a HOLD signal with appropriate confidence rather than an empty array, unless the data is truly inconclusive.
Ensure the JSON is perfectly formatted.

Also include a detailed human-readable explanation in the 'explanation' field. In your explanation, if you are providing a BUY or SELL signal, try to briefly mention the potential outlook for this signal or key factors that might influence its success (e.g., "This BUY signal is based on a strong upward momentum and a breakout above a key resistance level, suggesting potential for further gains if volume supports the move. However, watch for resistance near $X.").
`,
});

const generateTradingSignalsFlow = ai.defineFlow(
  {
    name: 'generateTradingSignalsFlow',
    inputSchema: GenerateTradingSignalsInputSchema,
    outputSchema: GenerateTradingSignalsOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    // Basic validation to ensure the output isn't completely empty or malformed before returning
    if (!output || typeof output.signals !== 'string' || typeof output.explanation !== 'string') {
        console.error('AI flow returned malformed output (missing signals/explanation strings):', output);
        // Attempt to return a valid-looking empty/error response
        return {
            signals: "[]",
            explanation: "Error: AI service returned an invalid response structure (missing signals or explanation strings). Please check the AI flow logs."
        };
    }
    try {
        const parsedSignals = JSON.parse(output.signals);
        if (!Array.isArray(parsedSignals)) {
            console.error('AI flow returned signals that are not a JSON array:', output.signals);
            return {
                signals: "[]", 
                explanation: `Error: AI service returned signals that are not a JSON array. Explanation provided: ${output.explanation}`
            };
        }
    } catch (e) {
        const errorMsg = e instanceof Error ? e.message : "Unknown JSON parse error";
        console.error('AI flow returned invalid JSON for signals:', output.signals, errorMsg);
        return {
            signals: "[]", // Default to empty array string on JSON parse error
            explanation: `Error: AI service returned signals that could not be parsed as JSON (${errorMsg}). Explanation provided: ${output.explanation}`
        };
    }
    return output!;
  }
);

